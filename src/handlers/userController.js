/*
 *
 * SPDX-License-Identifier: Apache-2.0
 */

'use strict';

const { Wallets } = require('fabric-network');
const FabricCAServices = require('fabric-ca-client');
const path = require('path');
const { buildCAClient, registerAndEnrollUser } = require('../../utils/CAUtil.js');
const { buildCCPOrg, buildWallet, getOrgName } = require('../../utils/AppUtil.js');
const { SETUP_TYPE } = require('../../utils/Constants.js');
const logger = require('../../logger')(module);
const config = require('../../config/cred');


exports.registerEnrollUser = async (req, res, next) => {
   try{		
	let org = req.body.orgName;
	let user = req.body.userId;

	let caOrg;
	let walletPath;
	let mspOrg;
	let department;

	console.log(config.SETUP)


	if(config.SETUP == SETUP_TYPE.K8S){
		let orgName = getOrgName(org)
		caOrg= `${orgName}-ca`
		walletPath  = '../../../wallet/'+orgName;
		mspOrg = orgName.charAt(0).toUpperCase() + orgName.slice(1) + 'MSP';
		// Need to verify affiliations generated by k8s
		department = orgName +'.department1'
	}else {
		caOrg = 'ca.'+org+'.example.com';
		console.log(caOrg)
		walletPath  = '../../wallet/'+org;
		console.log('walletPath', walletPath)

		mspOrg = 'O' + org.substr(1) + 'MSP';
		console.log(mspOrg)

		department = org+'.department1'
		console.log(department)

	}

	logger.info({userInfo: req.loggerInfo, method:'registerEnrollUser'})
    
	const ccpOrg = buildCCPOrg(org);
    const caOrgClient = buildCAClient(FabricCAServices, ccpOrg, caOrg);
	const walletPathOrg = path.join(__dirname, walletPath);
  	const walletOrg = await buildWallet(Wallets, walletPathOrg);

	let response = await registerAndEnrollUser(caOrgClient, walletOrg, mspOrg, user, department);
	if(response == 'true') {
		return res.status(200).send({ success: true,
            		message: "Successfully registered user" });
	} else {
		return res.status(500).send({ success: false,
                        message: "Registration failed, please enroll admin and proceed" });
	}

   }
	catch(err) {
		logger.error({userInfo: req.loggerInfo,method:'getImages', err})
	    return res.status(500).send({ success: false,
            message:  err });
	}

}
